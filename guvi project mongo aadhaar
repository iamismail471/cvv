{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/iamismail471/cvv/blob/master/guvi%20project%20mongo%20aadhaar\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install dnspython\n",
        "!pip install pymongo[srv]\n",
        "!pip install colored"
      ],
      "metadata": {
        "id": "SXf5JFan3N97",
        "outputId": "5c8e3138-5945-4242-9329-4546871cc3d2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting dnspython\n",
            "  Downloading dnspython-2.2.0-py3-none-any.whl (266 kB)\n",
            "\u001b[?25l\r\u001b[K     |█▎                              | 10 kB 18.7 MB/s eta 0:00:01\r\u001b[K     |██▌                             | 20 kB 23.9 MB/s eta 0:00:01\r\u001b[K     |███▊                            | 30 kB 14.8 MB/s eta 0:00:01\r\u001b[K     |█████                           | 40 kB 11.3 MB/s eta 0:00:01\r\u001b[K     |██████▏                         | 51 kB 6.7 MB/s eta 0:00:01\r\u001b[K     |███████▍                        | 61 kB 7.9 MB/s eta 0:00:01\r\u001b[K     |████████▋                       | 71 kB 7.6 MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 81 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |███████████                     | 92 kB 9.3 MB/s eta 0:00:01\r\u001b[K     |████████████▎                   | 102 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |█████████████▌                  | 112 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |██████████████▊                 | 122 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |████████████████                | 133 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |█████████████████▏              | 143 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |██████████████████▍             | 153 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |███████████████████▋            | 163 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████▉           | 174 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 184 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▎        | 194 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▌       | 204 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▊      | 215 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████     | 225 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▎   | 235 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▌  | 245 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▊ | 256 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 266 kB 8.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 266 kB 8.4 MB/s \n",
            "\u001b[?25hInstalling collected packages: dnspython\n",
            "Successfully installed dnspython-2.2.0\n",
            "Requirement already satisfied: pymongo[srv] in /usr/local/lib/python3.7/dist-packages (4.0.1)\n",
            "Requirement already satisfied: dnspython<3.0.0,>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from pymongo[srv]) (2.2.0)\n",
            "Collecting colored\n",
            "  Downloading colored-1.4.3.tar.gz (29 kB)\n",
            "Building wheels for collected packages: colored\n",
            "  Building wheel for colored (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for colored: filename=colored-1.4.3-py3-none-any.whl size=14342 sha256=d81a2004ae7812d5e5dff865b1fd7119f29378ce7810718d8778bd2888755256\n",
            "  Stored in directory: /root/.cache/pip/wheels/4a/f6/00/835e81851bc345428a253721c8bdad0062721dfb861bc6e752\n",
            "Successfully built colored\n",
            "Installing collected packages: colored\n",
            "Successfully installed colored-1.4.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pymongo\n",
        "from pymongo import MongoClient\n",
        "from PIL import Image\n",
        "import io\n",
        "from termcolor import colored"
      ],
      "metadata": {
        "id": "ao4W9FcU3dB4"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "client = pymongo.MongoClient(\"mongodb+srv://iamismail22:9894997668@cluster0.emu9c.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\")\n",
        "db = client.Banking\n",
        "records =db.users"
      ],
      "metadata": {
        "id": "dF9e46na3fg3"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "count=3\n",
        "class nuser:\n",
        "  def __init__(self):\n",
        "    self.Branch=input('Enter Branch : \\t')\n",
        "    nuser.acc_type(self)\n",
        "    nuser.name(self)\n",
        "    nuser.mob(self)\n",
        "    nuser.user_name(self)\n",
        "    self.Password=input('Please enter a password :\\t')\n",
        "    nuser.gmail(self)\n",
        "    self.DOB=input('Enter date of birth (DD/MM/YYYY) :\\t')\n",
        "    nuser.adhar(self)\n",
        "    nuser.pan(self)\n",
        "    self.Gender=input('Enter Gender (Male/ Female/ Transgender) :\\t')\n",
        "    self.Marital_status=input('Enter marital status (Married/ Unmarried/ other):\\t')\n",
        "    self.Address=address= {'Current Address':\n",
        "              [{\n",
        "                 'street': input('Provide currerent address. Enter Street adress:\\t'),\n",
        "                 'city': input('Enter city:\\t'),\n",
        "                 'state':input('Enter state:\\t'),\n",
        "                 'zip': input('Enter zip:\\t')\n",
        "               }],\n",
        "           'Permanent Address':\n",
        "               [{\n",
        "                 'street': input('Provide permanent address. Enter Street adress:\\t'),\n",
        "                 'city': input('Enter city:\\t'),\n",
        "                 'state':input('Enter state:\\t'),\n",
        "                 'zip': input('Enter zip:\\t')\n",
        "               }]\n",
        "               }\n",
        "    nuser.image(self)\n",
        "    nuser.acc_bal(self)\n",
        "\n",
        "  def acc_type(self):\n",
        "    at=input('Enter type of account (current/saving) :\\t')\n",
        "    if at=='current' or at=='saving':\n",
        "      self.Account_Type=at\n",
        "    else:\n",
        "      nuser.acc_type(self)\n",
        "  def name(self):\n",
        "    n = input('Enter full name:\\t')\n",
        "    n = n.title()\n",
        "    self.Name = n  # enter name\n",
        "  def mob(self):\n",
        "    m = input('Enter mobile number:\\t')  # mail id as input\n",
        "    if m.isdigit() == True and len(m) == 10:\n",
        "      self.Mob_no = m\n",
        "    else:\n",
        "      print('\\nInvalid inputs for Mobile number. Try again.')\n",
        "      nuser.mob(self)\n",
        "  def gmail(self):\n",
        "    g = input('Enter mail id:\\t')  # gmail as input\n",
        "    g = g.lower()\n",
        "    a = records.find_one({'Gmail': g}) is None\n",
        "    if g.endswith(\"@gmail.com\") == True and g[:-10].isalnum() == True and a == True:\n",
        "      self.Gmail = g\n",
        "    else:\n",
        "      print('\\nInvalid inputs for Gmail. Enter again.')\n",
        "      nuser.gmail(self)\n",
        "  def user_name(self):\n",
        "    un = input('Enter a unique username:\\t')  \n",
        "    unn = records.find_one({'Username': un}) is None\n",
        "    if len(un)>7 and unn == True:\n",
        "      self.Username = un\n",
        "    else:\n",
        "      print('\\nInvalid inputs for Username. Enter again.')\n",
        "      nuser.user_name(self)\n",
        "  def adhar(self):\n",
        "      aa = input('Enter your 12 digit aadhar number:\\t')  # gmail as input\n",
        "    aaa = records.find_one({'UID': aa}) is None\n",
        "    if aa.isnumeric() == True and len(aa)==12 and aaa== True:\n",
        "      self.UDI = aa\n",
        "    else:\n",
        "      print('\\nInvalid aadhar number. Enter again.')\n",
        "      nuser.adhar(self)\n",
        "  def pan(self):\n",
        "    pa = input('Enter your 10 digit pan number:\\t')  # gmail as input\n",
        "    paa = records.find_one({'PAN': pa}) is None\n",
        "    if pa.isalnum() == True and len(pa)==10 and paa== True:\n",
        "      self.PAN = pa\n",
        "    else:\n",
        "      print('\\nInvalid pan number. Enter again.')\n",
        "      nuser.pan(self)\n",
        "  def image(self):\n",
        "      img_a = input('Enter address of the passport image :\\t')\n",
        "      img_for = input('Enter image format:\\t')\n",
        "      img_for = img_for.upper()\n",
        "\n",
        "      im = Image.open(img_a)  # open image\n",
        "      image_bytes = io.BytesIO()\n",
        "      im.save(image_bytes, format=img_for)\n",
        "      i = image_bytes.getvalue()\n",
        "      self.Image =i\n",
        "  def acc_bal(self):\n",
        "    bal=input('Enter initial amount to be credited to account :\\t')\n",
        "    if bal.isnumeric()==True:\n",
        "      self.Balance=int(bal)\n",
        "    else:\n",
        "      nuser.acc_bal(self)\n",
        "\n",
        "class user:\n",
        "  def __init__(self):\n",
        "    user.login(self)\n",
        "  def upcount(self):\n",
        "    global count\n",
        "      count -= 1\n",
        "  def banking(self):\n",
        "    print('\\nTo credit acount press : 1\\nTo debit account press : 2\\nTo view account balance press : 3\\nTo exit from current login press : 4')\n",
        "    user.operation(self)  \n",
        "  def login(self):\n",
        "    global count\n",
        "    if count>0:\n",
        "      en=input('\\nEnter Username :\\t')\n",
        "      ep=input('Enter password :\\t')\n",
        "      a=records.find_one({'Username': en,'Password':ep}) is not None\n",
        "      if a==True:\n",
        "        self.username=en\n",
        "        print('\\t\\tValidation successful !')\n",
        "        user.banking(self)\n",
        "      else:\n",
        "        user.upcount(self)\n",
        "        print(f'\\nInvalid credential ! you have {count} attempts left. Please enter again.')\n",
        "        user.login(self)\n",
        "    else:\n",
        "      print('\\nYou have reached the maximum login attempts. Exit your browser and try again.')\n",
        "  def credit(self):\n",
        "    c=input('\\nPlease enter the amount to be credited :\\t')\n",
        "    c=int(c)\n",
        "    myquery={'Username':self.username}\n",
        "    update={'$inc': {'Balance':c}}\n",
        "    records.update_one(myquery,update)\n",
        "    ac=records.find_one({'Username': self.username},{'Balance':1,'_id':0})\n",
        "    ba=ac['Balance']\n",
        "    print(f'\\nRs {c} have been successfully credit to your account.\\nYour account balance is Rs {ba}')\n",
        "  def debit(self):\n",
        "    d=int(input('\\nPlease enter the amount to be debited :\\t'))\n",
        "    d=int(d)\n",
        "    ad=records.find_one({'Username': self.username},{'Balance':1,'_id':0})\n",
        "    ba=ad['Balance']\n",
        "    if int(ba) >d:\n",
        "      myquery={'Username':self.username}\n",
        "      update={'$inc': {'Balance':-d}}\n",
        "      records.update_one(myquery,update)\n",
        "      ad=records.find_one({'Username': self.username},{'Balance':1,'_id':0})\n",
        "       ba=ad['Balance']\n",
        "      print(f'\\nRs {d} have been successfully debited from your account.\\nYour account balance is Rs {ba}')\n",
        "    else:\n",
        "      print(colored('\\nYou have insufficient balance to comple this transaction.\\nPlease enter some lower denomination to proceed.','red'))\n",
        "      user.debit(self)\n",
        "  def balance(self):\n",
        "    a=records.find_one({'Username': self.username},{'Balance':1,'_id':0})\n",
        "    ba=a['Balance']\n",
        "    print(f'\\n\\t\\t\\tYour account balance is Rs {ba}')\n",
        "  def operation(self):\n",
        "    x=int(input('\\nPlease enter the input to proceed :\\t'))\n",
        "    if x==1:\n",
        "      user.credit(self)\n",
        "      user.operation(self)\n",
        "    elif x==2:\n",
        "      user.debit(self)\n",
        "      user.operation(self)\n",
        "    elif x==3:\n",
        "      user.balance(self)\n",
        "      user.operation(self)\n",
        "    elif x==4:\n",
        "      print(colored('\\nThank you ! Wish you a great day ahead.','white','on_green'))\n",
        "    else:\n",
        "      print('\\nInvalid inputs. Try again.')\n",
        "\n",
        "print('\\n')\n",
        "print(colored(('Welcome to TN Bank NetBanking.').center(170),'blue', 'on_yellow',['dark','bold','underline','blink']))\n",
        "print(colored(('Wishing you a Good Day!').center(170),'red', 'on_white',['bold','dark']))\n",
        "print(colored('''Dear Customer,\n",
        "\\t\\tWelcome to the login page of TN Bank NetBanking.\n",
        "\n",
        "Existing user? to login input : 1\n",
        "New user? to create new account input : 2\n",
        "''','blue'))\n",
        "\n",
        "x= input('Please provide an input :\\t')\n",
        "if x=='1':\n",
        "  print('\\nNice to see you back. Verify your credentials to proceed.')\n",
        "  user()\n",
        "elif x=='2':\n",
        "   print('''\\nDear Customer,\n",
        "\\t\\tWelcome to the new login page of TN Bank NetBanking. Please continue to account creation by providing the following detail.''')\n",
        "  print('\\n\\t\\tLet’s Get Started')\n",
        "  d = nuser()\n",
        "  records.insert_one(d.__dict__)  # insert the dict1 into records\n",
        "  print('\\nGreat ! Your account has been successfully created. \\n\\tPlease login with username and password after some time to avail all of our services.')\n",
        "else:\n",
        "  print(colored('Invalid input ! Try again.','white','on_red',['bold']))"
      ],
      "metadata": {
        "id": "sNsEyOQt5bky",
        "outputId": "5a3c50da-7949-4b64-bcac-821ecda46711",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 130
        }
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-36-559bc9891095>\"\u001b[0;36m, line \u001b[0;32m70\u001b[0m\n\u001b[0;31m    aaa = records.find_one({'UID': aa}) is None\u001b[0m\n\u001b[0m                                               ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Welcome To Colaboratory",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}